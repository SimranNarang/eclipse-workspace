package com.stackroute.datamunger.reader;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.Date;
import java.util.regex.Pattern;

import com.stackroute.datamunger.query.DataTypeDefinitions;
import com.stackroute.datamunger.query.Header;

public class CsvQueryProcessor extends QueryProcessingEngine {

	

	/*
	 * parameterized constructor to initialize filename. As you are trying to
	 * perform file reading, hence you need to be ready to handle the IO Exceptions.
	 */
	private BufferedReader readFile;
	private String fileName;
	public CsvQueryProcessor(String fileName) throws FileNotFoundException {
		readFile = new BufferedReader(new FileReader(fileName));
		this.fileName = fileName;
	}

	/*
	 * implementation of getHeader() method. We will have to extract the headers
	 * from the first line of the file.
	 */
	@Override
	public Header getHeader() throws IOException {
		readFile = new BufferedReader(new FileReader(fileName));
		// read the first line
		String str = readFile.readLine();
		String headers[]= str.trim().split(",");
		// populate the header object with the String array containing the header names
		Header header = new Header(headers);
		return header;
	}
	

	/**
	 * This method will be used in the upcoming assignments
	 */
	@Override
	public void getDataRow() {

	}

	/*
	 * implementation of getColumnType() method. To find out the data types, we will
	 * read the first line from the file and extract the field values from it. In
	 * the previous assignment, we have tried to convert a specific field value to
	 * Integer or Double. However, in this assignment, we are going to use Regular
	 * Expression to find the appropriate data type of a field. Integers: should
	 * contain only digits without decimal point Double: should contain digits as
	 * well as decimal point Date: Dates can be written in many formats in the CSV
	 * file. However, in this assignment,we will test for the following date
	 * formats('dd/mm/yyyy',
	 * 'mm/dd/yyyy','dd-mon-yy','dd-mon-yyyy','dd-month-yy','dd-month-yyyy','yyyy-mm-dd')
	 */
	@Override
	public DataTypeDefinitions getColumnType() throws IOException {
		readFile =new BufferedReader(new FileReader(fileName));	
		String header = readFile.readLine();
		String firstRow = readFile.readLine();
		String[] size = header.split(",");
		String []data = firstRow.trim().split(",");
		String[] dataType = new String[size.length];
		if(size.length!=data.length) {
			Object temp = new Object();
			for(int i=data.length;i<size.length;i++)
				dataType[i]= temp.getClass().getName();
		}
		// checking for Integer
		Pattern patternInt = Pattern.compile("[0-9]+");
		
		// checking for floating point numbers
		Pattern patternFloat = Pattern.compile("[0-9]+\\.[0-9]+");
		
		// checking for date format dd/mm/yyyy
		Pattern patternDate1 = Pattern.compile("((0[1-9]|[12]\\d|3[01])\\/(0[1-9]|1[0-2])\\/[12]\\d{3})");
		
		// checking for date format mm/dd/yyyy
		Pattern patternDate2 = Pattern.compile("((0[1-9]|1[0-2])\\/(0[1-9]|[12]\\d|3[01])\\/[12]\\d{3})");
		
		// checking for date format dd-mon-yy
		Pattern patternDate3 = Pattern.compile("((0[1-9]|1[0-2])-[a-zA-Z]{3}-\\d{2})");
		
		// checking for date format dd-mon-yyyy
		Pattern patternDate4 = Pattern.compile("((0[1-9]|1[0-2])-[a-zA-Z]{3}-[12]\\d{3})");
		
		// checking for date format dd-month-yy
		Pattern patternDate5 = Pattern.compile("((0[1-9]|1[0-2])-[January|February|March|April|May|June|July|August|September|October|November|December]-\\d{2})",Pattern.CASE_INSENSITIVE);
		
		// checking for date format dd-month-yyyy
		Pattern patternDate6 = Pattern.compile("((0[1-9]|1[0-2])-[January|February|March|April|May|June|July|August|September|October|November|December]-[12]\\d{3})",Pattern.CASE_INSENSITIVE);
		
		// checking for date format yyyy-mm-dd
		Pattern patternDate7 = Pattern.compile("([1-2]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))");
		
		for (int i=0;i<data.length;i++) {
			if(patternInt.matcher(data[i]).matches()) {
				Integer a =Integer.parseInt(data[i]);
				dataType[i]= a.getClass().getName();
			}else if(patternFloat.matcher(data[i]).matches()) {
				Float a =Float.parseFloat(data[i]);
				dataType[i]=a.getClass().getName();
			}else if(patternDate1.matcher(data[i]).matches()||patternDate2.matcher(data[i]).matches()||patternDate3.matcher(data[i]).matches()||patternDate4.matcher(data[i]).matches()||patternDate5.matcher(data[i]).matches()||patternDate6.matcher(data[i]).matches()||patternDate7.matcher(data[i]).matches()) {
				Date date = new Date();
				dataType[i]=date.getClass().getName();
			}else {
				dataType[i]=data[i].getClass().getName();
			}
		}
		DataTypeDefinitions dataTypeDefinitions = new DataTypeDefinitions(dataType);
		return dataTypeDefinitions;
	}
	
	

	
	

}
